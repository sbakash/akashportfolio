{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar named_references_1 = require(\"./named-references\");\n\nvar numeric_unicode_map_1 = require(\"./numeric-unicode-map\");\n\nvar surrogate_pairs_1 = require(\"./surrogate-pairs\");\n\nvar allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), {\n  all: named_references_1.namedReferences.html5\n});\n\nfunction replaceUsingRegExp(macroText, macroRegExp, macroReplacer) {\n  macroRegExp.lastIndex = 0;\n  var replaceMatch = macroRegExp.exec(macroText);\n  var replaceResult;\n\n  if (replaceMatch) {\n    replaceResult = \"\";\n    var replaceLastIndex = 0;\n\n    do {\n      if (replaceLastIndex !== replaceMatch.index) {\n        replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n      }\n\n      var replaceInput = replaceMatch[0];\n      replaceResult += macroReplacer(replaceInput);\n      replaceLastIndex = replaceMatch.index + replaceInput.length;\n    } while (replaceMatch = macroRegExp.exec(macroText));\n\n    if (replaceLastIndex !== macroText.length) {\n      replaceResult += macroText.substring(replaceLastIndex);\n    }\n  } else {\n    replaceResult = macroText;\n  }\n\n  return replaceResult;\n}\n\nvar encodeRegExps = {\n  specialChars: /[<>'\"&]/g,\n  nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n  extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g\n};\nvar defaultEncodeOptions = {\n  mode: \"specialChars\",\n  level: \"all\",\n  numeric: \"decimal\"\n};\n\nfunction encode(text, _a) {\n  var _b = _a === void 0 ? defaultEncodeOptions : _a,\n      _c = _b.mode,\n      mode = _c === void 0 ? \"specialChars\" : _c,\n      _d = _b.numeric,\n      numeric = _d === void 0 ? \"decimal\" : _d,\n      _e = _b.level,\n      level = _e === void 0 ? \"all\" : _e;\n\n  if (!text) {\n    return \"\";\n  }\n\n  var encodeRegExp = encodeRegExps[mode];\n  var references = allNamedReferences[level].characters;\n  var isHex = numeric === \"hexadecimal\";\n  return replaceUsingRegExp(text, encodeRegExp, function (input) {\n    var result = references[input];\n\n    if (!result) {\n      var code = input.length > 1 ? surrogate_pairs_1.getCodePoint(input, 0) : input.charCodeAt(0);\n      result = (isHex ? \"&#x\" + code.toString(16) : \"&#\" + code) + \";\";\n    }\n\n    return result;\n  });\n}\n\nexports.encode = encode;\nvar defaultDecodeOptions = {\n  scope: \"body\",\n  level: \"all\"\n};\nvar strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nvar attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\nvar baseDecodeRegExps = {\n  xml: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.xml\n  },\n  html4: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html4\n  },\n  html5: {\n    strict: strict,\n    attribute: attribute,\n    body: named_references_1.bodyRegExps.html5\n  }\n};\n\nvar decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {\n  all: baseDecodeRegExps.html5\n});\n\nvar fromCharCode = String.fromCharCode;\nvar outOfBoundsChar = fromCharCode(65533);\nvar defaultDecodeEntityOptions = {\n  level: \"all\"\n};\n\nfunction getDecodedEntity(entity, references, isAttribute, isStrict) {\n  var decodeResult = entity;\n  var decodeEntityLastChar = entity[entity.length - 1];\n\n  if (isAttribute && decodeEntityLastChar === \"=\") {\n    decodeResult = entity;\n  } else if (isStrict && decodeEntityLastChar !== \";\") {\n    decodeResult = entity;\n  } else {\n    var decodeResultByReference = references[entity];\n\n    if (decodeResultByReference) {\n      decodeResult = decodeResultByReference;\n    } else if (entity[0] === \"&\" && entity[1] === \"#\") {\n      var decodeSecondChar = entity[2];\n      var decodeCode = decodeSecondChar == \"x\" || decodeSecondChar == \"X\" ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));\n      decodeResult = decodeCode >= 1114111 ? outOfBoundsChar : decodeCode > 65535 ? surrogate_pairs_1.fromCodePoint(decodeCode) : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode] || decodeCode);\n    }\n  }\n\n  return decodeResult;\n}\n\nfunction decodeEntity(entity, _a) {\n  var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,\n      level = _b === void 0 ? \"all\" : _b;\n\n  if (!entity) {\n    return \"\";\n  }\n\n  return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n\nexports.decodeEntity = decodeEntity;\n\nfunction decode(text, _a) {\n  var _b = _a === void 0 ? defaultDecodeOptions : _a,\n      _c = _b.level,\n      level = _c === void 0 ? \"all\" : _c,\n      _d = _b.scope,\n      scope = _d === void 0 ? level === \"xml\" ? \"strict\" : \"body\" : _d;\n\n  if (!text) {\n    return \"\";\n  }\n\n  var decodeRegExp = decodeRegExps[level][scope];\n  var references = allNamedReferences[level].entities;\n  var isAttribute = scope === \"attribute\";\n  var isStrict = scope === \"strict\";\n  return replaceUsingRegExp(text, decodeRegExp, function (entity) {\n    return getDecodedEntity(entity, references, isAttribute, isStrict);\n  });\n}\n\nexports.decode = decode;","map":{"version":3,"mappings":"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","names":["allNamedReferences","__assign","named_references_1","all","html5","replaceUsingRegExp","macroText","macroRegExp","macroReplacer","lastIndex","replaceMatch","exec","replaceResult","replaceLastIndex","index","substring","replaceInput","length","encodeRegExps","specialChars","nonAscii","nonAsciiPrintable","nonAsciiPrintableOnly","extensive","defaultEncodeOptions","mode","level","numeric","encode","text","_a","_b","_c","_d","_e","encodeRegExp","references","characters","isHex","input","result","code","surrogate_pairs_1","charCodeAt","toString","exports","defaultDecodeOptions","scope","strict","attribute","baseDecodeRegExps","xml","body","html4","decodeRegExps","fromCharCode","String","outOfBoundsChar","defaultDecodeEntityOptions","getDecodedEntity","entity","isAttribute","isStrict","decodeResult","decodeEntityLastChar","decodeResultByReference","decodeSecondChar","decodeCode","parseInt","substr","numeric_unicode_map_1","decodeEntity","entities","decode","decodeRegExp"],"sources":["/Users/akashsb/Documents/GitHub/akashportfolio/git/Untitled/node_modules/html-entities/src/index.ts"],"sourcesContent":["import {bodyRegExps, namedReferences} from './named-references';\nimport {numericUnicodeMap} from './numeric-unicode-map';\nimport {fromCodePoint, getCodePoint} from './surrogate-pairs';\n\nconst allNamedReferences = {\n    ...namedReferences,\n    all: namedReferences.html5\n};\n\nfunction replaceUsingRegExp(macroText: string, macroRegExp: RegExp, macroReplacer: (input: string) => string): string {\n    macroRegExp.lastIndex = 0;\n    let replaceMatch = macroRegExp.exec(macroText);\n    let replaceResult;\n    if (replaceMatch) {\n        replaceResult = '';\n        let replaceLastIndex = 0;\n        do {\n            if (replaceLastIndex !== replaceMatch.index) {\n                replaceResult += macroText.substring(replaceLastIndex, replaceMatch.index);\n            }\n            const replaceInput = replaceMatch[0];\n            replaceResult += macroReplacer(replaceInput);\n            replaceLastIndex = replaceMatch.index + replaceInput.length;\n        } while ((replaceMatch = macroRegExp.exec(macroText)));\n\n        if (replaceLastIndex !== macroText.length) {\n            replaceResult += macroText.substring(replaceLastIndex);\n        }\n    } else {\n        replaceResult = macroText;\n    }\n    return replaceResult;\n}\n\nexport type Level = 'xml' | 'html4' | 'html5' | 'all';\n\ninterface CommonOptions {\n    level?: Level;\n}\n\nexport type EncodeMode = 'specialChars' | 'nonAscii' | 'nonAsciiPrintable' | 'nonAsciiPrintableOnly' | 'extensive';\n\nexport interface EncodeOptions extends CommonOptions {\n    mode?: EncodeMode;\n    numeric?: 'decimal' | 'hexadecimal';\n}\n\nexport type DecodeScope = 'strict' | 'body' | 'attribute';\n\nexport interface DecodeOptions extends CommonOptions {\n    scope?: DecodeScope;\n}\n\nconst encodeRegExps: Record<EncodeMode, RegExp> = {\n    specialChars: /[<>'\"&]/g,\n    nonAscii: /[<>'\"&\\u0080-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    nonAsciiPrintable: /[<>'\"&\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    nonAsciiPrintableOnly: /[\\x01-\\x08\\x11-\\x15\\x17-\\x1F\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g,\n    extensive: /[\\x01-\\x0c\\x0e-\\x1f\\x21-\\x2c\\x2e-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7d\\x7f-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/g\n};\n\nconst defaultEncodeOptions: EncodeOptions = {\n    mode: 'specialChars',\n    level: 'all',\n    numeric: 'decimal'\n};\n\n/** Encodes all the necessary (specified by `level`) characters in the text */\nexport function encode(\n    text: string | undefined | null,\n    {mode = 'specialChars', numeric = 'decimal', level = 'all'}: EncodeOptions = defaultEncodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const encodeRegExp = encodeRegExps[mode];\n    const references = allNamedReferences[level].characters;\n    const isHex = numeric === 'hexadecimal';\n\n    return replaceUsingRegExp(text, encodeRegExp, (input) => {\n        let result = references[input];\n        if (!result) {\n            const code = input.length > 1 ? getCodePoint(input, 0)! : input.charCodeAt(0);\n            result = (isHex ? '&#x' + code.toString(16) : '&#' + code) + ';';\n        }\n        return result;\n    });\n}\n\nconst defaultDecodeOptions: DecodeOptions = {\n    scope: 'body',\n    level: 'all'\n};\n\nconst strict = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+);/g;\nconst attribute = /&(?:#\\d+|#[xX][\\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;\n\nconst baseDecodeRegExps: Record<Exclude<Level, 'all'>, Record<DecodeScope, RegExp>> = {\n    xml: {\n        strict,\n        attribute,\n        body: bodyRegExps.xml\n    },\n    html4: {\n        strict,\n        attribute,\n        body: bodyRegExps.html4\n    },\n    html5: {\n        strict,\n        attribute,\n        body: bodyRegExps.html5\n    }\n};\n\nconst decodeRegExps: Record<Level, Record<DecodeScope, RegExp>> = {\n    ...baseDecodeRegExps,\n    all: baseDecodeRegExps.html5\n};\n\nconst fromCharCode = String.fromCharCode;\nconst outOfBoundsChar = fromCharCode(65533);\n\nconst defaultDecodeEntityOptions: CommonOptions = {\n    level: 'all'\n};\n\nfunction getDecodedEntity(\n    entity: string,\n    references: Record<string, string>,\n    isAttribute: boolean,\n    isStrict: boolean\n): string {\n    let decodeResult = entity;\n    const decodeEntityLastChar = entity[entity.length - 1];\n    if (isAttribute && decodeEntityLastChar === '=') {\n        decodeResult = entity;\n    } else if (isStrict && decodeEntityLastChar !== ';') {\n        decodeResult = entity;\n    } else {\n        const decodeResultByReference = references[entity];\n        if (decodeResultByReference) {\n            decodeResult = decodeResultByReference;\n        } else if (entity[0] === '&' && entity[1] === '#') {\n            const decodeSecondChar = entity[2];\n            const decodeCode =\n                decodeSecondChar == 'x' || decodeSecondChar == 'X'\n                    ? parseInt(entity.substr(3), 16)\n                    : parseInt(entity.substr(2));\n\n            decodeResult =\n                decodeCode >= 0x10ffff\n                    ? outOfBoundsChar\n                    : decodeCode > 65535\n                    ? fromCodePoint(decodeCode)\n                    : fromCharCode(numericUnicodeMap[decodeCode] || decodeCode);\n        }\n    }\n    return decodeResult;\n}\n\n/** Decodes a single entity */\nexport function decodeEntity(\n    entity: string | undefined | null,\n    {level = 'all'}: CommonOptions = defaultDecodeEntityOptions\n): string {\n    if (!entity) {\n        return '';\n    }\n    return getDecodedEntity(entity, allNamedReferences[level].entities, false, false);\n}\n\n/** Decodes all entities in the text */\nexport function decode(\n    text: string | undefined | null,\n    {level = 'all', scope = level === 'xml' ? 'strict' : 'body'}: DecodeOptions = defaultDecodeOptions\n) {\n    if (!text) {\n        return '';\n    }\n\n    const decodeRegExp = decodeRegExps[level][scope];\n    const references = allNamedReferences[level].entities;\n    const isAttribute = scope === 'attribute';\n    const isStrict = scope === 'strict';\n\n    return replaceUsingRegExp(text, decodeRegExp, (entity) =>\n        getDecodedEntity(entity, references, isAttribute, isStrict)\n    );\n}\n"]},"metadata":{},"sourceType":"script"}